#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1        &kp N2    &kp N3   &kp N4       &kp N5        &kp UP_ARROW     &kp N6  &kp N7       &kp N8     &kp N9   &kp N0            &kp BACKSPACE
&kp TAB           &kp Q         &kp W     &kp E    &kp R        &kp T         &kp DOWN_ARROW   &kp Y   &kp U        &kp I      &kp O    &kp P             &kp DELETE
&kp LEFT_CONTROL  &kp A         &kp S     &kp D    &kp F        &kp G         &kp LEFT_ARROW   &kp H   &kp J        &kp K      &kp L    &kp SEMI          &kp APOS
&kp LSHFT         &kp Z         &kp X     &kp C    &kp V        &kp B         &kp RIGHT_ARROW  &kp N   &kp M        &kp COMMA  &kp DOT  &kp FSLH          &kp RIGHT_SHIFT
&kp C_MUTE        &kp LEFT_GUI  &kp LALT  &kp END  &lt 1 SPACE  &lt 4 HOME    &kp ENTER        &to 1   &lt 1 SPACE  &kp ENTER  &kp DEL  &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
            label = "Default_layer";
        };

        layer_1 {
            bindings = <
&kp GRAVE         &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4    &mmv MOVE_UP     &kp HASH   &kp EQUAL       &kp KP_SLASH    &kp KP_MULTIPLY  &kp KP_SUBTRACT  &trans
&kp CAPS          &kp PRINTSCREEN  &kp LC(Y)       &kp UP_ARROW    &kp LC(F)        &kp DOLLAR      &mmv MOVE_DOWN   &kp RC(X)  &kp NUMBER_7    &kp NUMBER_8    &kp NUMBER_9     &kp KP_PLUS      &kp EQUAL
&kp DELETE        &kp LC(A)        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PERCENT     &mmv MOVE_LEFT   &kp RC(V)  &kp NUMBER_4    &kp NUMBER_5    &kp NUMBER_6     &kp KP_ENTER     &kp RIGHT_BRACKET
&kp F4            &kp LC(Z)        &kp LC(X)       &kp LC(C)       &kp LC(V)        &kp ASTERISK    &mmv MOVE_RIGHT  &kp RC(C)  &kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3     &kp DEL          &trans
&kp C_PLAY_PAUSE  &trans           &kp LA(C)       &kp EXCL        &lt 0 QUESTION   &lt 4 TILDE     &mkp LCLK        &to 2      &lt 2 NUMBER_0  &kp LANGUAGE_1  &kp LANGUAGE_2   &trans
            >;

            display-name = "NUM_layer";
            sensor-bindings = <&inc_dec_kp C_FF C_RW>;
        };

        layer_2 {
            bindings = <
&kp F1  &kp F2     &kp F3         &kp F4     &kp F5         &kp F6         &trans  &kp F7     &kp F8                &kp F9                 &kp F10    &kp F11   &kp F12
&trans  &kp GRAVE  &kp TILDE      &kp EQUAL  &kp QMARK      &kp INS        &trans  &kp ASTRK  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp HOME   &kp END   &trans
&trans  &kp EXCL   &kp AT         &kp HASH   &kp DOLLAR     &kp PERCENT    &trans  &kp UNDER  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp PIPE  &trans
&trans  &kp CARET  &kp AMPERSAND  &kp ASTRK  &kp AMPERSAND  &kp PIPE       &trans  &kp RCTRL  &kp LBKT              &kp RBKT               &kp COLON  &kp BSLH  &trans
&trans  &trans     &trans         &trans     &mo 3          &mo 4          &trans  &to 0      &to 1                 &trans                 &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
            label = "Special_char";
        };

        layer_3 {
            bindings = <
&out OUT_USB  &out OUT_BLE     &bt BT_CLR_ALL   &bt BT_CLR       &trans           &trans             &mmv MOVE_UP     &rgb_ug RGB_HUI  &kp F10  &kp F11  &kp F12  &bootloader      &sys_reset
&trans        &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_ON   &rgb_ug RGB_OFF  &rgb_ug RGB_BRI    &mmv MOVE_DOWN   &rgb_ug RGB_HUD  &kp F7   &kp F8   &kp F9   &trans           &trans
&trans        &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD    &mmv MOVE_LEFT   &rgb_ug RGB_SAI  &kp F4   &kp F5   &kp F6   &rgb_ug RGB_SPI  &rgb_ug RGB_EFF
&trans        &trans           &trans           &trans           &trans           &trans             &mmv MOVE_RIGHT  &rgb_ug RGB_SAD  &kp F1   &kp F2   &kp F3   &rgb_ug RGB_SPD  &rgb_ug RGB_EFR
&trans        &trans           &trans           &trans           &to 0            &mo 4              &mkp LCLK        &trans           &trans   &trans   &trans   &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "F_Num";
        };

        layer_4 {
            bindings = <
&trans  &trans            &trans              &trans         &trans           &trans       &trans  &trans          &trans          &trans           &trans          &trans            &trans
&trans  &trans            &trans              &kp LC(MINUS)  &kp LC(KP_PLUS)  &kp F3       &trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN   &trans          &trans            &trans
&trans  &kp LG(L)         &kp LG(LEFT_ARROW)  &kp LG(RIGHT)  &kp LC(N)        &kp LC(G)    &trans  &kp UNDERSCORE  &mkp LCLK       &mkp RCLK        &mmv MOVE_LEFT  &mmv MOVE_RIGHT   &trans
&trans  &kp LC(LS(LEFT))  &kp LC(LS(RIGHT))   &kp LC(LEFT)   &kp LC(RIGHT)    &kp LC(B)    &trans  &kp EQUAL       &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans          &kp LC(RS(PLUS))  &trans
&trans  &trans            &kp LS(LEFT_ARROW)  &kp LS(RIGHT)  &trans           &trans       &trans  &mmv MOVE_UP    &mmv MOVE_DOWN  &kp F3           &trans          &trans
            >;

            label = "Mouse_layer";
        };
    };
};
